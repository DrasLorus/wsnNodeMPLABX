/* Microchip Technology Inc. and its subsidiaries.  You may use this software 
 * and any derivatives exclusively with Microchip products. 
 * 
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES, WHETHER 
 * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED 
 * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A 
 * PARTICULAR PURPOSE, OR ITS INTERACTION WITH MICROCHIP PRODUCTS, COMBINATION 
 * WITH ANY OTHER PRODUCTS, OR USE IN ANY APPLICATION. 
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
 * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND 
 * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS 
 * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE 
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS 
 * IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF 
 * ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF THESE 
 * TERMS. 
 */

/* 
 * File: usart.h
 * Author: Camille Monière
 * Comments:
 * Revision history: 
 */

// This is a guard condition so that contents of this file are not included
// more than once.  
#ifndef USART_H
#define	USART_H

#include <xc.h> // include processor files - each processor file is guarded.  

#include <stdint.h>
#include <stdbool.h>

#ifndef SYSTEM_H
#define _XTAL_FREQ      20000000
#else
#include "system.h"
#endif


#define FIFOSIZE            64
#define TX_RDY              (TRMT!=0?1:0)
#define RX_RDY              (RCIF!=0?1:0)

#define SPBRG_AT_MAXIMUM 0
    
#define BRGH_AT_115200 (1)
#define BRGH_AT_57600  (1)
#define BRGH_AT_38400  (1)
#define BRGH_AT_19200  (1)
#define BRGH_AT_9600   (1)
#define BRGH_AT_4800   (1)
#define BRGH_AT_2400   (0)
#define BRGH_AT_1200   (0)

#define SPBRG_AT_115200  (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_115200)) * 115200UL) - 1)
#if !((SPBRG_AT_115200 > 0) && (SPBRG_AT_115200 < 256))
#error Baud rate 115200 invalid
#endif
#define SPBRG_AT_57600  (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_57600)) * 57600UL) - 1)
#if !((SPBRG_AT_57600 > 0) && (SPBRG_AT_57600 < 256))
#error Baud rate 57600 invalid
#endif
#define SPBRG_AT_38400  (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_38400)) * 38400UL) - 1)
#if !((SPBRG_AT_38400 > 0) && (SPBRG_AT_38400 < 256))
#error Baud rate 38400 invalid
#endif
#define SPBRG_AT_19200  (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_19200)) * 19200UL) - 1)
#if !((SPBRG_AT_19200 > 0) && (SPBRG_AT_19200 < 256))
#error Baud rate 19200 invalid
#endif
#define SPBRG_AT_9600   (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_9600)) *  9600UL) - 1)
#if !((SPBRG_AT_9600 > 0) && (SPBRG_AT_9600 < 256))
#error Baud rate 9600 invalid
#endif
/*#define SPBRG_AT_4800   (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_4800)) *  4800UL) - 1)
#if !((SPBRG_AT_4800 > 0) && (SPBRG_AT_4800 < 256))
#error Baud rate 4800 invalid
#endif*/
#define SPBRG_AT_2400   (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_2400)) *  2400UL) - 1)
#if !((SPBRG_AT_2400 > 0) && (SPBRG_AT_2400 < 256))
#error Baud rate 2400 invalid
#endif
/*#define SPBRG_AT_1200   (_XTAL_FREQ/((64UL>>(2UL*BRGH_AT_1200)) *  1200UL) - 1)
#if !((SPBRG_AT_1200 > 0) && (SPBRG_AT_1200 < 256))
#error Baud rate 1200 invalid
#endif*/

typedef enum eUSART_BAUD {USART_BAUD_NONE=0,USART_BAUD_MAXIMUM,USART_BAUD_115200,USART_BAUD_57600,USART_BAUD_38400,USART_BAUD_19200,USART_BAUD_9600/*,USART_BAUD_4800*/,USART_BAUD_2400/*,USART_BAUD_1200*/} USART_BAUD;

/*typedef struct FIFO {
    char str[FIFOSIZE];
    uint8_t iw;
    uint8_t ir;
} fifo;
*/
volatile uint8_t OERRcounter;
volatile uint8_t FERRcounter;

// Comment a function and leverage automatic documentation with slash star star
/**
    <p><b>Function prototype: void InitUsart(USART_BAUD baudrate);</b></p>
  
    <p><b>Summary: Initialyse the transiever and the baudrate generator </b></p>

    <p><b>Description:</b></p>

    <p><b>Precondition:</b></p>

    <p><b>Parameters:</b></p>

    <p><b>Returns:</b></p>

    <p><b>Example:</b></p>
    <code>
 
    </code>

    <p><b>Remarks:</b></p>
**/
void InitUsart(USART_BAUD baudrate);

void SendChar(char c);

void SendString(char * s);

/**
    <p><b>Function prototype: uint8_t ReceiveChar(char * c);</b></p>
  
    <p><b>Summary: Receive a character</b></p>

    <p><b>Description: The register pointed by c is affected by the value of RCREG</b></p>

    <p><b>Precondition: Have to be used in interruption, generated by RCIF and RCIE</b></p>

    <p><b>Parameters: char * c, a pointer to ONE character</b></p>

    <p><b>Returns: Nothing</b></p>

    <p><b>Example:</b></p>
    <code>
    char buffer;
    ReceiveChar(&buffer);
    
    </code>

    <p><b>Remarks:</b></p>
**/
uint8_t ReceiveChar(char * c);

#endif	/* XC_HEADER_TEMPLATE_H */

